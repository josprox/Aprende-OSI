package com.josprox.redesosi.data.network

import android.util.Log
import com.josprox.redesosi.BuildConfig
import com.josprox.redesosi.data.database.QuestionEntity
import io.ktor.client.HttpClient
import io.ktor.client.engine.cio.CIO
import io.ktor.client.plugins.contentnegotiation.ContentNegotiation
import io.ktor.client.request.bearerAuth
import io.ktor.client.request.post
import io.ktor.client.request.setBody
import io.ktor.client.statement.bodyAsText
import io.ktor.http.ContentType
import io.ktor.http.contentType
import io.ktor.serialization.kotlinx.json.json
import kotlinx.serialization.Serializable
import kotlinx.serialization.json.Json
import org.dotenv.vault.dotenvVault

// --- Modelos de datos ---
@Serializable
data class GroqRequest(
    val messages: List<Message>,
    val model: String,
    val temperature: Double = 0.7,
    val max_tokens: Int = 2048,
    val top_p: Double = 1.0,
    val stream: Boolean = false,
    val response_format: ResponseFormat = ResponseFormat("json_object")
)

@Serializable
data class Message(val role: String, val content: String)

@Serializable
data class ResponseFormat(val type: String)

@Serializable
data class GroqResponse(val choices: List<Choice>? = null)

@Serializable
data class Choice(val message: Message)

@Serializable
data class GroqError(val error: GroqErrorDetail? = null)

@Serializable
data class GroqErrorDetail(val message: String? = null, val type: String? = null)

// --- Modelo para el JSON que esperamos de la IA ---
@Serializable
data class QuizPayload(val questions: List<QuizQuestion>)

@Serializable
data class QuizQuestion(
    val questionText: String,
    val optionA: String,
    val optionB: String,
    val optionC: String,
    val optionD: String, // <-- CAMBIO 1: Opci√≥n D a√±adida
    val correctAnswer: String
)

class GroqApiService {

    private val jsonParser = Json {
        ignoreUnknownKeys = true
        prettyPrint = true
        isLenient = true
    }

    private val client = HttpClient(CIO) {
        install(ContentNegotiation) {
            json(jsonParser)
        }
    }

    suspend fun generateQuestions(moduleContent: String, moduleId: Int): List<QuestionEntity> {
        val dotenv = dotenvVault(BuildConfig.DOTENV_KEY) {
            directory = "/assets"
            filename = "env.vault" // instead of '.env', use 'env'
        }
        val apiKey = dotenv["GROQ_CLOUD_API"]
        val modelGroq = dotenv["GROQ_CLOUD_MODEL"]

        if (apiKey.isEmpty() || apiKey == "TU_API_KEY_AQUI") {
            Log.e("GroqApiService", "API Key de Groq no encontrada o inv√°lida.")
            return emptyList()
        }

        // --- CAMBIO 2: Prompt "Nivel EGEL" mejorado ---
        val prompt = """
            ACT√öA COMO UN EXPERTO DISE√ëADOR DE EX√ÅMENES DE CERTIFICACI√ìN (EGEL, CCNA).
            Tu objetivo es crear un banco de preguntas de alta dificultad para un examen de nivel licenciatura, basado estrictamente en el siguiente contenido: "$moduleContent".

            REGLAS CR√çTICAS PARA LAS PREGUNTAS:
            1.  **Formato:** Genera entre 15 y 30 preguntas de opci√≥n m√∫ltiple. (Prioriza calidad sobre cantidad).
            2.  **Opciones:** 4 opciones de respuesta (A, B, C, D).
            3.  **Complejidad (Nivel Licenciatura/EGEL):**
                * Las preguntas deben forzar el **AN√ÅLISIS**, la **APLICACI√ìN** o la **COMPARACI√ìN** de conceptos, no la simple memorizaci√≥n.
                * **Distractores Plausibles (CR√çTICO):** Las 3 opciones incorrectas deben ser *altamente plausibles*, *sutiles* y *conceptualmente muy cercanas* a la respuesta correcta. Evita opciones obviamente incorrectas o absurdas. El objetivo es hacer dudar a un estudiante avanzado.
            4.  **Tipos de Pregunta Preferidos:**
                * **Escenario:** "Dada esta situaci√≥n/problema, ¬øqu√© capa/protocolo es responsable?"
                * **Comparativas:** "¬øCu√°l es la diferencia *clave* entre el Protocolo X y el Protocolo Y en el contexto de...?"
                * **Diagn√≥stico:** "Un usuario experimenta [PROBLEMA]. ¬øEn qu√© capa es m√°s probable que resida la falla?"

            FORMATO DE SALIDA OBLIGATORIO:
            Responde *√∫nicamente* con el objeto JSON. No incluyas texto introductorio, saludos, explicaciones ni markdown. La estructura exacta es:
            {
              "questions": [
                {
                  "questionText": "Texto de la pregunta...",
                  "optionA": "Opci√≥n A (distractor plausible)",
                  "optionB": "Opci√≥n B (distractor plausible)",
                  "optionC": "Opci√≥n C (respuesta correcta)",
                  "optionD": "Opci√≥n D (distractor plausible)",
                  "correctAnswer": "C"
                }
              ]
            }
        """.trimIndent()

        val request = GroqRequest(
            messages = listOf(Message("user", prompt)),
            model = modelGroq
        )

        return try {
            // --- 1Ô∏è‚É£ Obtener respuesta cruda como texto para depuraci√≥n ---
            val rawResponse = client.post("https://api.groq.com/openai/v1/chat/completions") {
                bearerAuth(apiKey)
                contentType(ContentType.Application.Json)
                setBody(request)
            }.bodyAsText()

            Log.d("GroqApiService", "üì© Respuesta cruda de Groq: $rawResponse")

            // --- CAMBIO 3: L√≥gica 'try/catch' MEJORADA para evitar falsos positivos ---

            // --- 2Ô∏è‚É£ Decodificar la respuesta (Intento de √âxito) ---
            val response: GroqResponse
            try {
                // Intentamos decodificar como una respuesta de √âXITO
                response = jsonParser.decodeFromString<GroqResponse>(rawResponse)
            } catch (e: Exception) {
                // --- 3Ô∏è‚É£ Si falla, ASUMIMOS que es un ERROR de API ---
                Log.w("GroqApiService", "No se pudo decodificar como GroqResponse (√©xito), intentando como GroqError. Raz√≥n: ${e.message}")
                try {
                    // Ahora s√≠, intentamos decodificar como un objeto de ERROR
                    val errorObj = jsonParser.decodeFromString<GroqError>(rawResponse)
                    Log.e("GroqApiService", "‚ùå Error REAL desde Groq API: ${errorObj.error?.message}")
                } catch (parseError: Exception) {
                    // Si falla AMBOS, la respuesta es irreconocible
                    Log.e("GroqApiService", "üí• Error CR√çTICO: No se pudo decodificar la respuesta ni como √âxito ni como Error: ${parseError.message}")
                }
                return emptyList()
            }

            // --- 4Ô∏è‚É£ Si llegamos aqu√≠, 'response' es un objeto GroqResponse v√°lido ---
            val jsonContent = response.choices?.firstOrNull()?.message?.content
            if (jsonContent == null) {
                Log.e("GroqApiService", "‚ö†Ô∏è No se recibi√≥ contenido en 'choices'.")
                return emptyList()
            }

            Log.d("GroqApiService", "üß† Contenido recibido del modelo: $jsonContent")

            // --- 5Ô∏è‚É£ Intentar decodificar el JSON generado por el modelo ---
            val quizPayload = try {
                jsonParser.decodeFromString<QuizPayload>(jsonContent)
            } catch (parseError: Exception) {
                Log.e("GroqApiService", "‚ùó Error al parsear el JSON generado por el modelo: ${parseError.message}")
                return emptyList()
            }

            // --- 6Ô∏è‚É£ Convertir a entidades ---
            val questions = quizPayload.questions.map {
                QuestionEntity(
                    moduleId = moduleId,
                    questionText = it.questionText,
                    optionA = it.optionA,
                    optionB = it.optionB,
                    optionC = it.optionC,
                    optionD = it.optionD, // <-- CAMBIO 4: Mapeo de optionD
                    correctAnswer = it.correctAnswer
                )
            }

            Log.d("GroqApiService", "‚úÖ ${questions.size} preguntas generadas correctamente.")
            questions

        } catch (e: Exception) {
            Log.e("GroqApiService", "üí• Error al generar preguntas: ${e.message}", e)
            emptyList()
        }
    }
}